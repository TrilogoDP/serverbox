{% if (langmark is defined) %}
<div id="cmswidget-{{ cmswidget }}" class="cmswidget">
{{langmark }}
</div>

{% if (settings_widget['anchor'] is defined and settings_widget['anchor'] != '') %}
<script>
	$('#cmswidget-{{ cmswidget }}').hide();
	{% if (settings_widget['doc_ready'] is defined and settings_widget['doc_ready']) %}
	$(document).ready(function(){
	 {% endif %}
		var prefix = '{{ prefix }}';
		var cmswidget = '{{ cmswidget }}';
		var heading_title = '{{ heading_title }}';
		var data = $('#cmswidget-{{ cmswidget }}').html();
		{{ settings_widget['anchor'] }};
		$('#cmswidget-{{ cmswidget }}').show();
		delete data;
		delete prefix;
		delete cmswidget;
	{% if (settings_widget['doc_ready'] is defined and settings_widget['doc_ready']) %}
	});
	 {% endif %}
</script>

 {% endif %}
 {% else %}

{% if languages|length > 1 %}

{% if (settings_widget['autopopup'] is defined and settings_widget['autopopup']) %}

<div data-toggle="modal" class="hidden" data-target="#lm_{{ settings_widget['cmswidget'] }}_Modal" id="langmarkmodal_{{ settings_widget['cmswidget'] }}"></div>

<style>

.lm_ua_flag {
	text-align: center; 
	vertical-align: middle;			
	display: inline-block;
	width: 16px;
	height: 16px;
	border-radius: 50%;
	margin-right: 0px;
	margin-top: -3px;
	background-image: linear-gradient(to bottom, #0082D1, #0082D1 50%, #FFD100 50%, #FFD100);
}

#lm_{{ settings_widget['cmswidget'] }}_Modal .lm_flex {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}
#lm_{{ settings_widget['cmswidget'] }}_Modal .lm_flex > div {
  padding-left: 10px;
  padding-right: 10px;
}
#lm_{{ settings_widget['cmswidget'] }}_Modal .lm-modal-html {
	width: 100%;
	text-align: center;
}

{% if (settings_widget['pointer'] is defined and settings_widget['pointer']) %}

#lm_{{ settings_widget['cmswidget'] }}_Modal .modal-dialog::before {
  content: "";
  position: absolute;

  top: -9px;

  border-bottom: 12px solid #FFF;
  border-left: 12px solid transparent;
  border-right: 12px solid transparent;

  width: 0;
  height: 0;

  filter: drop-shadow(0 -4px 3px rgba(0, 0, 0, 0.25));
  -webkit-filter: drop-shadow(0 -4px 3px rgba(0, 0, 0, 0.25));
  
  z-index: 100600;

}
{% endif %}

#lm_{{ settings_widget['cmswidget'] }}_Modal .modal-dialog {
{% if (settings_widget['window_width'] is defined and settings_widget['window_width'] != '') %}
  width: {{ settings_widget['window_width'] }}px; 
{% endif %}
  opacity: {% if (settings_widget['window_opacity'] is defined and settings_widget['window_opacity']  != '') %}{{ settings_widget['window_opacity'] }}{% endif %};
}

</style>

<div class="modal fade lm_modal" id="lm_{{ settings_widget['cmswidget'] }}_Modal" style="padding-right: 0px !important;" data-scroll="false" data-focus="false" data-backdrop="{% if settings_widget.dark_back  and  settings_widget.dark_back %}true{% else %}false{% endif %}" tabindex="-1" role="dialog" aria-hidden="true" data-keyboard="false">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
 		
		{% if settings_widget.title_status  and  settings_widget.title_status %}     
	  	<div class="modal-header">
			<button type="button" class="close lm-close" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close">
				<span aria-hidden="true">&times;</span>
			</button>
			<h4 class="modal-title">
				{% for language in languages %}
					{% if (language['current']) %}
						{{ settings_widget['title'][language['language_id']] }}
					{% endif %}
				{% endfor %}
			</h4>
		</div>
		{% endif %}

      <div class="modal-body">
	    <div class="lm-modal-html">
			{% for language in languages %}
				{% if (language['current']) %}
					{{ settings_widget['html'][language['language_id']] }}
				{% endif %}
			{% endfor %}
		</div>

		<div class="lm_flex">
		{% for language in languages %}
		{% if language.name != ' ' and language.name != '#' %}
			{% if not settings_widget['current_store_id'] or (settings_widget['current_store_id'] and language.store_id == store_id) %}
			{% if language.main %}
				<div>
					<a onclick="lm_deleteCookie('languageauto'); window.location = '{{ language.url }}'" href="{{ language['url'] }}{% if (language['current']) %}{{ '' }}{% endif %}">{% if (settings_widget['image_status'] is defined and settings_widget['image_status']) %}<img src="catalog/language/{{ language.code }}/{{ language.code }}.png" alt="{{ language.name }}" title="{{ language.name }}" /> {% endif %}{{ language['name'] }}</a>
				</div>
				{% else %} 
				<div>
					<a onclick="lm_setCookie('languageauto', '1', {expires: {{ settings_widget['cookie_auto_days'] }}}); window.location = '{{ language.url }}'" href="{{ language['url'] }}{% if (language['current']) %}{{ '' }}{% endif %}">{% if (settings_widget['image_status'] is defined and settings_widget['image_status']) %}<img src="catalog/language/{{ language.code }}/{{ language.code }}.png" alt="{{ language.name }}" title="{{ language.name }}" /> {% endif %}{{ language['name'] }}</a>
				</div>
			{% endif %} 
			{% endif %}
			{% endif %} 
		{% endfor %}
		</div>

      </div>

		{% if  settings_widget.footer_status  and  settings_widget.footer_status %}      
		<div class="modal-footer">
        	<button type="button" class="btn btn-secondary lm-close" data-dismiss="modal" data-bs-dismiss="modal">
			{% for language in languages %}
				{% if (language['current']) %}
					{{ settings_widget['lm_text_close'][language['language_id']] }}
				{% endif %}
			{% endfor %}
			</button>
		</div>
		{% endif %}

    </div>
  </div>
</div>

{% for language in languages %}
	{% if (language['current']) %}
		{% if (settings_widget['code_custom'][language['language_id']] is defined and settings_widget['code_custom'][language['language_id']]  != '') %}
			{{ settings_widget['code_custom'][language['language_id']] }}
		{% endif %}
  {% endif %}
{% endfor %}

<script>

{% if settings_widget['window_width'] is defined and settings_widget['window_width'] == '' %}
    {% set settings_widget = settings_widget | merge({'window_width': '260'}) %}
{% endif %}


lm_{{ settings_widget['cmswidget'] }}_afterLoad_state = false;
function lm_{{ settings_widget['cmswidget'] }}_afterload(){
	if (!lm_{{ settings_widget['cmswidget'] }}_afterLoad_state) {
		document.body.removeEventListener('touchstart', lm_{{ settings_widget['cmswidget'] }}_afterload); document.body.removeEventListener('touchmove', lm_{{ settings_widget['cmswidget'] }}_afterload); document.body.removeEventListener('mouseover', lm_{{ settings_widget['cmswidget'] }}_afterload); document.removeEventListener('mousemove', lm_{{ settings_widget['cmswidget'] }}_afterload);
        if ($('body').hasClass('modal-open')) {
		} else {
		
      		{% if (settings_widget['position'] is defined and settings_widget['position']  != '') %}
			
				var lm_{{ settings_widget['cmswidget'] }}_modal = $('#lm_{{ settings_widget['cmswidget'] }}_Modal');
				var lm_{{ settings_widget['cmswidget'] }}_modal_dialog = $('#lm_{{ settings_widget['cmswidget'] }}_Modal .modal-dialog');
	

				$('body').append(lm_{{ settings_widget['cmswidget'] }}_modal);

				var lm_{{ settings_widget['cmswidget'] }}_languageOffset = $('{{ settings_widget['position'] }}').offset();

				if (typeof lm_{{ settings_widget['cmswidget'] }}_languageOffset != "undefined" ) {

					var lm_{{ settings_widget['cmswidget'] }}_languageHeight = $('{{ settings_widget['position'] }}').outerHeight(); 
					var lm_{{ settings_widget['cmswidget'] }}_windowWidth = $(window).width();

					const lm_{{ settings_widget['cmswidget'] }}_style = document.createElement('style');
					
					if ((lm_{{ settings_widget['cmswidget'] }}_languageOffset.left {% if (settings_widget['window_width'] is defined and settings_widget['window_width']  != '') %} + {{ settings_widget['window_width'] }}{% endif %}) > lm_{{ settings_widget['cmswidget'] }}_windowWidth) {
						lm_{{ settings_widget['cmswidget'] }}_offset = (lm_{{ settings_widget['cmswidget'] }}_languageOffset.left{% if (settings_widget['window_width'] is defined and settings_widget['window_width']  != '') %} + {{ settings_widget['window_width'] }}{% endif %}) - lm_{{ settings_widget['cmswidget'] }}_windowWidth;
						lm_{{ settings_widget['cmswidget'] }}_languageOffset.left = lm_{{ settings_widget['cmswidget'] }}_languageOffset.left - lm_{{ settings_widget['cmswidget'] }}_offset - 18;	

						lm_{{ settings_widget['cmswidget'] }}_style.innerHTML = "#lm_{{ settings_widget['cmswidget'] }}_Modal .modal-dialog::before { right: 9px; }";					
					} else {
						lm_{{ settings_widget['cmswidget'] }}_style.innerHTML = "#lm_{{ settings_widget['cmswidget'] }}_Modal .modal-dialog::before { left: 9px; }";					
					}
					
					{% if (settings_widget['pointer'] is defined and settings_widget['pointer']) %}
					topOffsetPointer_{{ settings_widget['cmswidget'] }} = 9;
					{% else %}
					topOffsetPointer_{{ settings_widget['cmswidget'] }} = 0;
					{% endif %}

					document.head.appendChild(lm_{{ settings_widget['cmswidget'] }}_style);

					lm_{{ settings_widget['cmswidget'] }}_modal_dialog.css({
						'margin': '0'
					});
				
				}
			{% endif %}

			{% if (settings_widget['position'] is defined and settings_widget['position']  != '') %}
					
				if (typeof lm_{{ settings_widget['cmswidget'] }}_languageOffset != "undefined" ) {
						
					let overflowValue_{{ settings_widget['cmswidget'] }} = getComputedStyle(document.body).overflow;

					document.body.style.overflow = 'visible';
					document.body.style.paddingRight = '0px';
						
					setTimeout( function() {$('body').removeClass('modal-open');}, 500) ; 
					
					$('#lm_{{ settings_widget['cmswidget'] }}_Modal').removeClass('fade');
					$('#lm_{{ settings_widget['cmswidget'] }}_Modal').removeClass('modal');

					$('#lm_{{ settings_widget['cmswidget'] }}_Modal').css({
						//'all': 'unset',
						'padding-right': '0px',
						'height': 'auto',
						'width': '0px',
						'position': 'absolute',
						'overflow': 'visible',
						'z-index': '100500',
						'top': lm_{{ settings_widget['cmswidget'] }}_languageOffset.top + lm_{{ settings_widget['cmswidget'] }}_languageHeight + topOffsetPointer_{{ settings_widget['cmswidget'] }},
						'left': lm_{{ settings_widget['cmswidget'] }}_languageOffset.left,
						'pointer-events': 'auto' 
					});	
					
					$('#lm_{{ settings_widget['cmswidget'] }}_Modal .modal-footer button.lm-close, #lm_{{ settings_widget['cmswidget'] }}_Modal .modal-header button.lm-close').click(function(){
						lm_setCookie('languageauto', '1', {expires: {{ settings_widget['cookie_auto_days'] }}});
						$('#lm_{{ settings_widget['cmswidget'] }}_Modal').remove();
					});
					document.body.style.overflow = overflowValue_{{ settings_widget['cmswidget'] }};
				}

			{% else %}	
				$('#lm_{{ settings_widget['cmswidget'] }}_Modal').modal('show');
			{% endif %}	
					

			lm_{{ settings_widget['cmswidget'] }}_afterLoad_state = true;
        }		
	}
}
var lm_{{ settings_widget['cmswidget'] }}_userAgent = navigator.userAgent || navigator.vendor || window.opera;
if (/Android|iPhone|iPad|iPod|Windows Phone|webOS|BlackBerry/i.test(lm_{{ settings_widget['cmswidget'] }}_userAgent)) {
	document.body.addEventListener('touchstart', lm_{{ settings_widget['cmswidget'] }}_afterload); document.body.addEventListener('touchmove', lm_{{ settings_widget['cmswidget'] }}_afterload); document.addEventListener('DOMContentLoaded', function() { setTimeout(lm_{{ settings_widget['cmswidget'] }}_afterload, {{ settings_widget['autoredirect_delay_mobile'] }}) });
} else {
	
	document.body.addEventListener('mouseover', function() {
            setTimeout( lm_{{ settings_widget['cmswidget'] }}_afterload, 1000) }); 
	document.addEventListener('mousemove', function() {
            setTimeout( lm_{{ settings_widget['cmswidget'] }}_afterload, 1000) }); 

	document.addEventListener('DOMContentLoaded', function() { setTimeout(lm_{{ settings_widget['cmswidget'] }}_afterload, {{ settings_widget['autoredirect_delay_desktop'] }}); }); }

	$('#lm_{{ settings_widget.cmswidget }}_Modal').on('hidden.bs.modal hidden', function () {
	{% for language in languages %}
		{% if  language.main  and  not language.current  and  settings_widget.redirect  and  settings_widget.redirect %}
	
	window.location = '{{ language.url }}';
			{% endif %}
	{% endfor %}
	})
	
</script>

<script>
function lm_setCookie(name, value, options = {}) {
options = {
  path: '/',
  ...options
};

let date = new Date(Date.now() + (86400e3 * options.expires));
date = date.toUTCString();
options.expires = date;
 
let updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);

for (let optionKey in options) {
  updatedCookie += "; " + optionKey;
  let optionValue = options[optionKey];
  if (optionValue !== true) {
    updatedCookie += "=" + optionValue;
  }
}
document.cookie = updatedCookie;
}

function lm_deleteCookie(name) {
  lm_setCookie(name, "", {'max-age': -1});
}
</script>
{% endif %}
{% endif %}
{% endif %}
